# -*- coding: utf-8 -*-
"""obj_8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VfdIlSn-VREWHcBhOF4BpKJP88Q5vrAP
"""

from google.colab import drive 
drive.mount ('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive 
!git clone https://github.com/tensorflow/models.git

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/models/research
!protoc object_detection/protos/*.proto --python_out=.

# Now install the actual api 
!cp object_detection/packages/tf2/setup.py . 
!python -m pip install .

!python object_detection/builders/model_builder_tf2_test.py

import os

os.chdir ('/content/drive/MyDrive/training_demo')

pwd

"""###train.record and test.record generating

"""

!python generate_tfrecord.py -x /content/drive/MyDrive/training_demo/images/train -l /content/drive/MyDrive/training_demo/annotations/label_map.pbtxt -o /content/drive/MyDrive/training_demo/annotations/train.record

# Create test data:
!python generate_tfrecord.py -x /content/drive/MyDrive/training_demo/images/test -l /content/drive/MyDrive/training_demo/annotations/label_map.pbtxt -o /content/drive/MyDrive/training_demo/annotations/test.record

# Commented out IPython magic to ensure Python compatibility.
# Download a model for transfer learning 
# %cd /content/drive/MyDrive
!wget http://download.tensorflow.org/models/object_detection/tf2/20200711/ssd_mobilenet_v2_fpnlite_320x320_coco17_tpu-8.tar.gz
# Unzip
!tar -xzvf ssd_mobilenet_v2_fpnlite_320x320_coco17_tpu-8.tar.gz

# Training

# Commented out IPython magic to ensure Python compatibility.
# Training the model 
# %cd /content/drive/MyDrive/models/research/object_detection/
#train 
!python model_main_tf2.py \
--pipeline_config_path=/content/drive/MyDrive/ssd_mobilenet_v2_fpnlite_320x320_coco17_tpu-8/pipeline.config \
--model_dir=/content/drive/MyDrive/output_training_2 --alsologtostderr

# Exporting the model 
# Now we will export the training outputs in a save model format so that we can use it for interface

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/models/research/object_detection
!python exporter_main_v2.py \
--trained_checkpoint_dir=/content/drive/MyDrive/output_training_2 \
--pipeline_config_path=/content/drive/MyDrive/ssd_mobilenet_v2_fpnlite_320x320_coco17_tpu-8/pipeline.config \
--output_directory /content/drive/MyDrive/inference_2

import tensorflow as tf
detect_model_2= tf.saved_model.load ('/content/drive/MyDrive/inference_2/saved_model')

print(detect_model_2.signatures['serving_default'].inputs)

detect_model_2.signatures['serving_default'].output_dtypes

detect_model_2.signatures['serving_default'].output_shapes

import numpy as np
import os
import six.moves.urllib as urllib
import sys
import tarfile
import tensorflow as tf
import zipfile

from collections import defaultdict
from io import StringIO
from matplotlib import pyplot as plt
from PIL import Image
from IPython.display import display

from object_detection.utils import ops as utils_ops
from object_detection.utils import label_map_util
from object_detection.utils import visualization_utils as vis_util

# List of the strings that is used to add correct label for each box.
PATH_TO_LABELS = '/content/drive/MyDrive/training_demo/annotations/label_map.pbtxt'
category_index = label_map_util.create_category_index_from_labelmap(PATH_TO_LABELS, use_display_name=True)

def run_inference_for_single_image(model, image):
  image = np.asarray(image)
  # The input needs to be a tensor, convert it using `tf.convert_to_tensor`.
  input_tensor = tf.convert_to_tensor(image)
  # The model expects a batch of images, so add an axis with `tf.newaxis`.
  input_tensor = input_tensor[tf.newaxis,...]

  # Run inference
  model_fn = model.signatures['serving_default']
  output_dict = model_fn(input_tensor)

  # All outputs are batches tensors.
  # Convert to numpy arrays, and take index [0] to remove the batch dimension.
  # We're only interested in the first num_detections.
  num_detections = int(output_dict.pop('num_detections'))
  output_dict = {key:value[0, :num_detections].numpy() 
                 for key,value in output_dict.items()}
  output_dict['num_detections'] = num_detections

  # detection_classes should be ints.
  output_dict['detection_classes'] = output_dict['detection_classes'].astype(np.int64)
   
  # Handle models with masks:
  if 'detection_masks' in output_dict:
    # Reframe the the bbox mask to the image size.
    detection_masks_reframed = utils_ops.reframe_box_masks_to_image_masks(
              output_dict['detection_masks'], output_dict['detection_boxes'],
               image.shape[0], image.shape[1])      
    detection_masks_reframed = tf.cast(detection_masks_reframed > 0.5,
                                       tf.uint8)
    output_dict['detection_masks_reframed'] = detection_masks_reframed.numpy()
    
  return output_dict

def show_inference(model, image_path):
  # the array based representation of the image will be used later in order to prepare the
  # result image with boxes and labels on it.
  image_np = np.array(Image.open(image_path))
  # Actual detection.
  output_dict = run_inference_for_single_image(model, image_np)
  # Visualization of the results of a detection.
  vis_util.visualize_boxes_and_labels_on_image_array(
      image_np,
      output_dict['detection_boxes'],
      output_dict['detection_classes'],
      output_dict['detection_scores'],
      category_index,
      instance_masks=output_dict.get('detection_masks_reframed', None),
      use_normalized_coordinates=True,
      line_thickness=8)

  display(Image.fromarray(image_np))

image_path= '/content/drive/MyDrive/training_demo/images/test/image24.jpg'
show_inference(detect_model_2, image_path)

image_path='/content/drive/MyDrive/training_demo/images/train/image16.jpg'
show_inference(detect_model_2, image_path)